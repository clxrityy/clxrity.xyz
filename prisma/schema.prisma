generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    // Use an unpooled/direct connection for the Prisma migration engine (Neon/pgBouncer compat)
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id        String   @id @default(cuid())
    type      String
    payload   Json
    createdAt DateTime @default(now())
}

// Guild configuration and birthdays for hbd bot
model GuildConfig {
    id              String   @id @default(cuid())
    guildId         String   @unique
    adminRoleId     String? // Role required for admin-only commands
    birthdayRoleId  String? // Role to assign on birthdays
    birthdayChannel String? // Channel to send birthday messages
    birthdayMessage String? // Template with {user}
    changeable      Boolean  @default(false) // whether users can change birthday
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Birthday {
    id        String   @id @default(cuid())
    userId    String // Discord user ID
    guildId   String // Discord guild ID (per-guild birthdays)
    month     Int
    day       Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, guildId])
}

// --- Logging for per-guild visibility in dashboard ---

enum LogLevel {
    ERROR
    WARN
    INFO
    DEBUG
}

enum LogCategory {
    COMMAND // slash commands registry/dispatch
    INTERACTION // component interactions
    CRON // scheduled jobs
    DISCORD_API // outbound Discord REST calls
    DATABASE // storage operations
    AUTH // auth/session
    SYSTEM // boot/runtime
}

model GuildLog {
    id        String      @id @default(cuid())
    guildId   String
    level     LogLevel
    category  LogCategory
    // High-level, safe-to-display summary (non-sensitive)
    summary   String?
    // Optional command or action context
    command   String? // e.g., command name like "hbd"/"config"
    action    String? // e.g., "execute", "followup", "announce"
    userId    String? // Discord user id (actor)
    success   Boolean? // whether the operation succeeded
    latencyMs Int?

    // Sensitive payloads MUST be encrypted at rest. Store ciphertext as Bytes.
    // Encryption/Decryption is handled in application code.
    messageCiphertext Bytes?
    detailsCiphertext Bytes?
    // Optional encryption metadata to support key rotation
    keyId             String? // identifier for the encryption key used
    encVer            Int     @default(1)

    createdAt DateTime @default(now())

    @@index([guildId, createdAt])
    @@index([guildId, category, createdAt])
    @@index([guildId, level, createdAt])
}

// Mirror runtime-created table to avoid drift during migrations
model BirthdayRunMarker {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    guildId   String
    runDate   DateTime @db.Date
    createdAt DateTime @default(now()) @map("created_at")

    @@unique([guildId, runDate])
    @@map("BirthdayRunMarker")
}

// Per-user view of their Discord guild memberships
model UserGuild {
    id          String   @id @default(cuid())
    userId      String // references User.id
    guildId     String // Discord guild ID
    name        String
    icon        String? // Discord icon hash
    owner       Boolean  @default(false)
    // Raw Discord permissions integer for the current user in that guild
    permissions BigInt   @db.BigInt
    // Derived flags for convenience in UI and queries
    adminPerm   Boolean  @default(false) // has ADMINISTRATOR bit in permissions
    isAdmin     Boolean  @default(false) // adminPerm OR owner
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([userId, guildId])
}

model CommandCooldown {
    id        String   @id @default(cuid())
    userId    String // Discord user ID
    command   String // Command name, e.g. 'horoscope'
    period    String // Cooldown period, e.g. '1h', '24h', '7d', '1m'
    lastUsed  DateTime // When the command was last used for this period
    expiresAt DateTime // When the cooldown expires
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, command, period])
}
