generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    // Use an unpooled/direct connection for the Prisma migration engine (Neon/pgBouncer compat)
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id        String   @id @default(cuid())
    type      String
    payload   Json
    createdAt DateTime @default(now())
}

// Guild configuration and birthdays for hbd bot
model GuildConfig {
    id              String   @id @default(cuid())
    guildId         String   @unique
    adminRoleId     String? // Role required for admin-only commands
    birthdayRoleId  String? // Role to assign on birthdays
    birthdayChannel String? // Channel to send birthday messages
    birthdayMessage String? // Template with {user}
    changeable      Boolean  @default(true) // whether users can change birthday
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Birthday {
    id        String   @id @default(cuid())
    userId    String // Discord user ID
    guildId   String // Discord guild ID (per-guild birthdays)
    month     Int
    day       Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, guildId])
}
